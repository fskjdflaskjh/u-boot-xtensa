U-Boot for the Xtensa Architecture
==================================


Xtensa Architecture and Diamond Cores
-------------------------------------

Xtensa is a configurable architecture from Tensilica, Inc. Diamonds are
pre-configured instances available for license and SoC cores in the same
manner as ARM, MIPS, etc.

Xtensa licensees create their own Xtensa cores with selected features
and custom instructions, registers and co-processors. The custom core
is configured with Tensilica tools and built with Tensilica's Xtensa
Processor Generator.

There are an effectively infinite number of CPUs in the Xtensa
architecture family. It is not feasible to support individual Xtensa
CPUs in U-Boot. Therefore, there is only a single 'xtensa' CPU in the cpu/
tree of U-Boot.

In the same manner as the Linux port to Xtensa, U-Boot adapts to an 
individual Xtensa core configuration using a set of macros provided with 
the particular core. This is part of what is known as the hardware 
abstraction layer (HAL). For the purpose of U-Boot, the HAL consists only 
of a few header files. These provide CPP macros that customize sources, 
Makefiles, and the linker script.

The Xtensa base instruction set architecture (ISA) uses a rotating
windowed register file to reduce code size and increase throughput. This
architecture gives rise to an unusual application binary interface (ABI)
or function calling convention.  There is a hardware option to not use
windowed registers, and a software option to not use windowed registers
if the processor is configured with a windowed register file. If windowed
registers are not used, a conventional ABI known as "Call0 ABI" is used
by the compiler and libraries.

Please refer to Tensilica documentation for more details of the
architecture and tools, and ABIs (calling conventions).


Adding support for an additional board
--------------------------------------

Adding support for an additional board for Xtensa is not much different
than for any other architecture. Because the processor variant is handled 
differently for Xtensa than for other architectures, The MKCONFIG script 
requires an additional parameter with the name of the processor configuration
(cpuconfig). the rule in the main Makefile is, therefore, slightly different.

If the board only support one fixed processor configuration, the rule for
the new board would look as follows.

myboard_config: unconfig
	@$(MKCONFIG) -a myboard xtensa xtensa myboard NULL cpuconfig
	@echo "VARIANT = cpuconfig" >> $(obj)include/config.mk

In the above rule, 'myboard' describes the name of the new board and 
'cpuconfig' the supported processor configuration.

The make-command to configure U-Boot for that board only requires the 
name of the board followed by '_config': make myboard_config

With some modification to the rule, U-Boot can be configured to any 
processor configuration that has been added. In that case, the argument 
for the make command to configure the board needs to be prefixed with 
the name of the processor configuration: make cpuconfig_myboard_config

%myboard_config: unconfig
	@$(MKCONFIG) -a myboard xtensa xtensa myboard avnet NULL $(*:_=)
	@echo "VARIANT = $(*:_=)" >> $(obj)include/config.mk


Adding support for an additional processor configuration
--------------------------------------------------------

The header files for one particular processor configuration are inside 
a variant specific directory located in the include/asm-xtensa directory. 
The name of that directory starts with 'variant-' followed by the name
for the processor configuration, for example, variant-dc232l for the 
Diamond DC232L processor.

    core.h	Definitions for the core itself.
    tie.h	Co-processors and custom extensions defined
    		in the Tensilica Instruction Extension (TIE)
		language.
    tie-asm.h	Assembly macros to access custom-defined registers
    		and states.

The build scripts automatically create an additional symbolic link to 
the variant as include/asm/variant. Source files requiring information
about the core configuration would simply include asm/variant/core.h.


Global Data Pointer, Exported Function Stubs, and the ABI
---------------------------------------------------------

To support standalone applications launched with the "go" command,
U-Boot provides a jump table of entrypoints to exported functions
(grep for EXPORT_FUNC). The implementation for Xtensa depends on
which ABI (or function calling convention) is used.

Call0 ABI is very conventional, and like most other architectures
maintains the global data pointer gd in a register. This is chosen
to be a14 because it is callee-saved (not clobbered) and has no 
other special use.

Windowed ABI presents unique difficulties with the above approach.
Because the register window rotates during a call, there is no
register that is constantly available for the global data pointer.
Therefore, a global variable is used in the same manner as i386.
Another difficulty arises from the requirement to have an 'entry'
at the beginning of a function, which rotates the register file and
reserves a stack frame. This is an integral part of the windowed ABI
implemented in hardware. It makes using a jump table to an arbitrary
(separately compiled) function a bit tricky. Use of a simple wrapper
is also very tedious due to the need to move all possible register
arguments and adjust the stack to handle arguments that cannot be
passed in registers. The most efficient approach is to have the jump
table perform the 'entry' so as to pretend it's the start of the
real function. This requires decoding the target function's 'entry'
instruction to determine the stack frame size, and adjusting the stack
pointer accordingly, then jumping into the target function just after
the 'entry'.  Decoding depends on the processor's endianness so uses
the HAL.  The implementation (12 instructions) is in examples/stubs.c .

------------------------------------------------------------------------------
Chris Zankel
Ross Morley
